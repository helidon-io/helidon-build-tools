/*
* Copyright (c) 2020 Oracle and/or its affiliates.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import org.apache.maven.repository.internal.MavenRepositorySystemUtils
import org.eclipse.aether.artifact.DefaultArtifact
import org.eclipse.aether.collection.CollectRequest
import org.eclipse.aether.RepositorySystem
import org.eclipse.aether.graph.Dependency
import org.eclipse.aether.graph.DependencyFilter
import org.eclipse.aether.resolution.ArtifactRequest
import org.eclipse.aether.resolution.DependencyRequest
import org.eclipse.aether.util.filter.DependencyFilterUtils

// TODO check requirements ?
// i.e maven version + JDK version

// setup aether
def repoSystem = MavenRepositorySystemUtils.newServiceLocator().getService(RepositorySystem.class);
def repoSession = request.getProjectBuildingRequest().getRepositorySession()

// resolve the archetype file
def archetypeFile = repoSystem.resolveArtifact(repoSession,
new ArtifactRequest().setArtifact(new DefaultArtifact(request.getArchetypeGroupId(),
request.getArchetypeArtifactId(), "jar", request.getArchetypeVersion())))
    .getArtifact()
    .getFile()

def engineGav = "{{engineGroupId}}:{{engineArtifactId}}:{{engineVersion}}"

// resolve the engine dependencies
def engineDependencies = repoSystem.resolveDependencies(repoSession, new DependencyRequest(
    new CollectRequest().setRoot(new Dependency(new DefaultArtifact(engineGav), "compile")),
    DependencyFilterUtils.classpathFilter("runtime"))).getArtifactResults()
        .collect { it.getArtifact().getFile().toURI().toURL() }

// create a class-loader with the engine dependencies to "dynamically" load the engine
def classLoader = new java.net.URLClassLoader(engineDependencies.toArray(new java.net.URL[engineDependencies.size()]),
    Thread.currentThread().getContextClassLoader())

def archetypeProperties = request.getProperties()
def props = [
    "maven": "true",
{{#propNames}}
    "{{.}}": archetypeProperties.getProperty("{{.}}"),
{{/propNames}}
]

def rootDir = new File(request.getOutputDirectory() + "/" + request.getArtifactId())
new File(rootDir, "pom.xml").delete() // delete place place-holder pom

// generate !
def engineClass = classLoader.loadClass("io.helidon.build.archetype.engine.ArchetypeEngine")
    .getConstructor(File.class, Map.class)
    .newInstance(archetypeFile, props)
    .generate(rootDir)
