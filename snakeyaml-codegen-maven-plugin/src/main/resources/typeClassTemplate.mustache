/*
 * Copyright (c) 2020 Oracle and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package {{generatedPackageName}};

{{#javaImports}}
import {{#isStatic}} static {{/isStatic}}{{name}};
{{/javaImports}}

{{#implImports}}
import {{#isStatic}} static {{/isStatic}}{{name}};
{{/implImports}}

{{#openAPIImports}}
import {{#isStatic}} static {{/isStatic}}{{name}};
{{/openAPIImports}}

import org.yaml.snakeyaml.TypeDescription;

class {{generatedClassName}}<T extends TypeDescription> {

    private final Map<Class<?>, T> types = new HashMap<>();
    private final BiFunction<T, EnumType<?>, T> enumAdder;
    private final Function<T, T> hasDefaultPropertyMarker;

    static class EnumType<E extends Enum<E>> {
        private final String propertyName;
        private final Class<E> enumType;

        static <E extends Enum<E>> EnumType create(String propertyName, Class<E> enumType) {
            return new EnumType<E>(propertyName, enumType);
        }

        String propertyName() {
            return propertyName;
        }

        Class<E> enumType() {
            return enumType;
        }

        E valueOf(String value) {
            return Enum.valueOf(enumType, value);
        }

        private EnumType(String propertyName, Class<E> enumType) {
            this.propertyName = propertyName;
            this.enumType = enumType;
        }
    }

    static <T extends TypeDescription> {{generatedClassName}}<T> create(
                                BiFunction<Class<?>, Class<?>, T> factoryFunction,
                                BiFunction<T, EnumType<?>, T> enumAdder,
                                Function<T, T> hasDefaultPropertyMarker) {
            return new {{generatedClassName}}<T>(factoryFunction, enumAdder, hasDefaultPropertyMarker);
        }

        Map<Class<?>, T> types() {
            return types;
        }

        Set<Map.Entry<Class<?>, T>> entrySet() {
            return types.entrySet();
        }

    Set<Class<?>> keySet() {
        return types.keySet();
    }

    boolean containsKey(Class<?> type) {
        return types.containsKey(type);
    }

    T get(Class<?> clazz) {
        return types.get(clazz);
    }

    private {{generatedClassName}}(BiFunction<Class<?>, Class<?>, T> factoryFunction,
            BiFunction<T, EnumType<?>, T> enumAdder, Function<T, T> hasDefaultPropertyMarker) {
        this.enumAdder = enumAdder;
        this.hasDefaultPropertyMarker = hasDefaultPropertyMarker;
{{#typesToAugment}}
        T td_{{simpleName}} = factoryFunction.apply({{simpleName}}.class, {{implementationType}}.class);
        {{#typeEnumsByType}}
        addEnum(td_{{simpleName}}, "{{enumName}}", {{simpleName}}.{{enumType}}.class);
        {{/typeEnumsByType}}
        {{#hasDefaultProperty}}
        markHasDefaultProperty(td_{{simpleName}});
        {{/hasDefaultProperty}}
        {{#propertyParameters}}
        td_{{simpleName}}.addPropertyParameters("{{parameterName}}"{{#parameterTypes}}, {{parameterType}}.class{{/parameterTypes}});
        {{/propertyParameters}}
        {{#propertySubstitutions}}
        td_{{simpleName}}.substituteProperty("{{propertySubName}}", {{propertySubType}}.class, "{{getter}}", "{{setter}}");
        {{/propertySubstitutions}}
        {{#isExtensible}}
        td_{{simpleName}}.substituteProperty("extensions", Map.class, "setExtensions", "getExtensions");
        td_{{simpleName}}.addPropertyParameters("extensions", String.class, Object.class);
        {{/isExtensible}}
        types.put(td_{{simpleName}}.getType(), td_{{simpleName}});

{{/typesToAugment}}
    }

    private <E extends Enum<E>> void addEnum(T td, String propertyName, Class<E> enumType) {
        enumAdder.apply(td, EnumType.create(propertyName, enumType));
    }

    private void markHasDefaultProperty(T td) {
        hasDefaultPropertyMarker.apply(td);
    }
}
